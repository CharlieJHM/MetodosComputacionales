import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.axes3d import Axes3D

#Lectura de archivos##############################################################################
data_time = np.loadtxt("Tmean_time.txt")
data_space = np.loadtxt("momo.txt")
data_anim = np.loadtxt("T_matrices_anim.txt")

#Definicion de variables y espacios###############################################################
x_lenght = 1.0
y_lenght = 1.0
dx = 0.01
n_x = int(x_lenght/dx)
t_max = 2500.0
dt = 0.1
n_t = int(t_max/dt)
x = np.linspace(0.0, x_lenght, n_x)
y = np.linspace(0.0, y_lenght, n_x)
t = np.linspace(dt, t_max, n_t)

xg, yg = np.meshgrid(x, y)

#Funcion que extrae la matriz requerida del archivo espacial##########################################
def Matrix_extractor(x):
	matrix = np.zeros((n_x, n_x))
	j = 0
	for j in range(n_x):
		i = j + (100*x)
		matrix[j] = data_space[i]
	return matrix.T

#Funcion que extrae la matriz requerida del archivo de animaciones###################################
def Anim_extractor(x):
	matrix = np.zeros((n_x, n_x))
	j = 0
	for j in range(n_x):
		i = j + (100*x)
		matrix[j] = data_anim[i]
	return matrix.T

#Graficas caso 1 open boundary##########################################################################
mapa = "gist_heat"
fig1 = plt.figure()
zg = Matrix_extractor(0)
ax = fig1.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
ax.view_init(30, 45)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=0s, C1, Open Bound.'], prop={'size':'9'})
plt.savefig("C1_OB_t0.png", format="png")
plt.close(fig1)

fig2 = plt.figure()
zg = Matrix_extractor(1)
ax = fig2.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=100s, C1, Open Bound.'], prop={'size':'9'})
plt.savefig("C1_OB_t100.png", format="png")
plt.close(fig2)

fig3 = plt.figure()
zg = Matrix_extractor(2)
ax = fig3.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 2.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=2500s, C1, Open Bound.'], prop={'size':'9'})
plt.savefig("C1_OB_t2500.png", format="png")
plt.close(fig3)

fig = plt.figure()
plt.plot(t, data_time[0], label="Caso1, Open Bound.")
plt.title("Temperatura Promedio")
plt.xlabel("time (s)")
plt.ylabel("Tmean(t) (C)")
plt.grid()
plt.legend(prop={'size':'9'})
plt.savefig("C1_OB_tmean.png", format="png")
plt.close(fig)

#Graficas caso 1 periodic boundary################################################################
fig5 = plt.figure()
zg = Matrix_extractor(3)
ax = fig5.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
ax.view_init(30, 45)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=0s, C1, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C1_PB_t0.png", format="png")
plt.close(fig5)

fig6 = plt.figure()
zg = Matrix_extractor(4)
ax = fig6.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(40.0, 60.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=100s, C1, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C1_PB_t100.png", format="png")
plt.close(fig6)

fig7 = plt.figure()
zg = Matrix_extractor(5)
ax = fig7.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(50.0, 52.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=2500s, C1, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C1_PB_t2500.png", format="png")

fig = plt.figure()
plt.plot(t, data_time[1], label="Caso1, Periodic Bound.")
plt.title("Temperatura Promedio")
plt.xlabel("time (s)")
plt.ylabel("Tmean(t) (C)")
plt.grid()
plt.legend(prop={'size':'9'})
plt.savefig("C1_PB_tmean.png", format="png")

#Graficas caso 1 fixed boundary################################################################
fig9 = plt.figure()
zg = Matrix_extractor(6)
ax = fig9.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
ax.view_init(30, 45)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=0s, C1, Fixed Bound.'], prop={'size':'9'})
plt.savefig("C1_FB_t0.png", format="png")

fig10 = plt.figure()
zg = Matrix_extractor(7)
ax = fig10.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(40.0, 60.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=100s, C1, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C1_FB_t100.png", format="png")

fig11 = plt.figure()
zg = Matrix_extractor(8)
ax = fig11.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(50.0, 50.1)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=2500s, C1, Fixed Bound.'], prop={'size':'9'})
plt.savefig("C1_FB_t2500.png", format="png")

fig = plt.figure()
plt.plot(t, data_time[2], label="Caso1, Fixed Bound.")
plt.title("Temperatura Promedio")
plt.xlabel("time (s)")
plt.ylabel("Tmean(t) (C)")
plt.grid()
plt.legend(prop={'size':'9'})
plt.savefig("C1_FB_tmean.png", format="png")

#Graficas caso 2 open boundary##########################################################################
fig13 = plt.figure()
zg = Matrix_extractor(9)
ax = fig13.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
ax.view_init(30, 45)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=0s, C2, Open Bound.'], prop={'size':'9'})
plt.savefig("C2_OB_t0.png", format="png")

fig14 = plt.figure()
zg = Matrix_extractor(10)
ax = fig14.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=100s, C2, Open Bound.'], prop={'size':'9'})
plt.savefig("C2_OB_t100.png", format="png")

fig15 = plt.figure()
zg = Matrix_extractor(11)
ax = fig15.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=2500s, C2, Open Bound.'], prop={'size':'9'})
plt.savefig("C2_OB_t2500.png", format="png")

fig = plt.figure()
plt.plot(t, data_time[3], label="Caso2, Open Bound.")
plt.title("Temperatura Promedio")
plt.xlabel("time (s)")
plt.ylabel("Tmean(t) (C)")
plt.grid()
plt.legend(prop={'size':'9'})
plt.savefig("C2_OB_tmean.png", format="png")

#Graficas caso 2 periodic boundary################################################################
fig17 = plt.figure()
zg = Matrix_extractor(12)
ax = fig17.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
ax.view_init(30, 45)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=0s, C2, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C2_PB_t0.png", format="png")

fig18 = plt.figure()
zg = Matrix_extractor(13)
ax = fig18.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=100s, C2, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C2_PB_t100.png", format="png")

fig19 = plt.figure()
zg = Matrix_extractor(14)
ax = fig19.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=2500s, C2, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C2_PB_t2500.png", format="png")

fig = plt.figure()
plt.plot(t, data_time[4], label="Caso2, Periodic Bound.")
plt.title("Temperatura Promedio")
plt.xlabel("time (s)")
plt.ylabel("Tmean(t) (C)")
plt.grid()
plt.legend(prop={'size':'9'})
plt.savefig("C2_PB_tmean.png", format="png")

#Graficas caso 2 fixed boundary################################################################
fig21 = plt.figure()
zg = Matrix_extractor(15)
ax = fig21.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
ax.view_init(30, 45)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=0s, C2, Fixed Bound.'], prop={'size':'9'})
plt.savefig("C2_FB_t0.png", format="png")

fig22 = plt.figure()
zg = Matrix_extractor(16)
ax = fig22.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=100s, C2, Periodic Bound.'], prop={'size':'9'})
plt.savefig("C2_FB_t100.png", format="png")

fig23 = plt.figure()
zg = Matrix_extractor(17)
ax = fig23.gca(projection="3d")
ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
plt.title("Surface T")
ax.set_xlabel("x (m)")
ax.set_ylabel("y (m)")
ax.set_zlabel("T (C)")
ax.set_zlim(0.0, 100.0)
blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
ax.legend([blue_proxy],['t=2500s, C2, Fixed Bound.'], prop={'size':'9'})
plt.savefig("C2_FB_t2500.png", format="png")

fig = plt.figure()
plt.plot(t, data_time[5], label="Caso2, Fixed Bound.")
plt.title("Temperatura Promedio")
plt.xlabel("time (s)")
plt.ylabel("Tmean(t) (C)")
plt.grid()
plt.legend(prop={'size':'9'})
plt.savefig("C2_FB_tmean.png", format="png")

#Graficas para animacion##################################################################
for i in range(35):
	fig = plt.figure()
	zg = Anim_extractor(i)
	ax = fig.gca(projection="3d")
	ax.plot_surface(xg, yg ,zg, rstride=1, cstride=1, cmap=mapa, linewidth=0, antialiased=True)
	plt.title("Surface T")
	ax.set_xlabel("x (m)")
	ax.set_ylabel("y (m)")
	ax.set_zlabel("T (C)")
	ax.set_zlim(45.0, 100.0)
	blue_proxy = plt.Rectangle((0, 0), 1, 1, fc="Orange")
	t_lab = 0
	if(i<24):
		t_lab = i*2
	else:
		t_lab = 50 + (i-24)*50
	label = "t=" + str(t_lab) + "s, C2, Fixed Bound."
	ax.legend([blue_proxy],[label], prop={'size':'9'})
	name = "anim" + str(i) + ".png"
	plt.savefig(name, format="png")
	plt.close(fig)
